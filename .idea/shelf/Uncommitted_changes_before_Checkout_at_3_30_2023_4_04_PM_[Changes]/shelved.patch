Index: src/main/java/frc/robot/AutoOptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package frc.robot;\r\n\r\nimport edu.wpi.first.math.util.Units;\r\nimport edu.wpi.first.wpilibj.smartdashboard.SendableChooser;\r\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\r\nimport edu.wpi.first.wpilibj2.command.CommandBase;\r\nimport edu.wpi.first.wpilibj2.command.Commands;\r\nimport edu.wpi.first.wpilibj2.command.InstantCommand;\r\nimport edu.wpi.first.wpilibj2.command.SequentialCommandGroup;\r\nimport edu.wpi.first.wpilibj2.command.StartEndCommand;\r\nimport edu.wpi.first.wpilibj2.command.WaitCommand;\r\nimport frc.robot.commands.AutoLevelingCommand;\r\nimport frc.robot.commands.ForwardCommand;\r\nimport frc.robot.commands.MecanumPathFollower;\r\nimport frc.robot.commands.PathToPose;\r\nimport frc.robot.subsystems.ArmSubsystem;\r\nimport frc.robot.subsystems.DriveSubsystem;\r\nimport frc.robot.subsystems.ManipulatorSubsystem;\r\nimport frc.robot.subsystems.PivotSubsystem;\r\nimport frc.robot.util.FieldUtil;\r\n\r\npublic class AutoOptions {\r\n\r\n  private SendableChooser<CommandBase> autoOptions = new SendableChooser<>();\r\n  private DriveSubsystem drive;\r\n  private PivotSubsystem pivot;\r\n  private ArmSubsystem arm;\r\n  private ManipulatorSubsystem manipulator;\r\n\r\n  public AutoOptions(\r\n      DriveSubsystem drive,\r\n      PivotSubsystem pivot,\r\n      ArmSubsystem arm,\r\n      ManipulatorSubsystem manipulator) {\r\n    this.drive = drive;\r\n    this.pivot = pivot;\r\n    this.arm = arm;\r\n    this.manipulator = manipulator;\r\n\r\n    // Tuning\r\n    autoOptions.setDefaultOption(\r\n        \"FirstPickUpLeftSide\",\r\n        new MecanumPathFollower(\r\n            drive, \"FirstPickUpLeftSide\", Constants.MediumAutoConstraints, true));\r\n    autoOptions.addOption(\r\n        \"FirstDropOffLeftSide\",\r\n        new MecanumPathFollower(\r\n            drive, \"FirstDropOffLeftSide\", Constants.MediumAutoConstraints, true));\r\n    autoOptions.addOption(\r\n        \"SecondPickUpLeftSide\",\r\n        new MecanumPathFollower(\r\n            drive, \"SecondPickUpLeftSide\", Constants.MediumAutoConstraints, true));\r\n    autoOptions.addOption(\r\n        \"SecondDropOffLeftSide\",\r\n        new MecanumPathFollower(\r\n            drive, \"SecondDropOffLeftSide\", Constants.MediumAutoConstraints, true));\r\n    autoOptions.addOption(\r\n        \"Straight 180 degree turning path\",\r\n        new MecanumPathFollower(\r\n            drive, \"Straight 180 degree turning path\", Constants.SlowAutoConstraints, true));\r\n    autoOptions.addOption(\r\n        \"45 degree turning path\",\r\n        new MecanumPathFollower(\r\n            drive, \"45 degree turning path\", Constants.MediumAutoConstraints, true));\r\n    autoOptions.addOption(\r\n        \"Charge Right\",\r\n        new MecanumPathFollower(drive, \"ChargeRight\", Constants.MediumAutoConstraints, true));\r\n    autoOptions.addOption(\r\n        \"ON The Fly Path Test\",\r\n        new PathToPose(drive, () -> FieldUtil.getTransformPoseStation(FieldUtil.Station1)));\r\n    autoOptions.addOption(\r\n        \"Straight Path\",\r\n        new MecanumPathFollower(drive, \"Straight Path\", Constants.FastAutoConstraints, true));\r\n    autoOptions.addOption(\r\n        \"Turn 180 Degrees\",\r\n        new MecanumPathFollower(drive, \"Turn 180 Degrees\", Constants.SlowAutoConstraints, true));\r\n\r\n    // Actual Pathing\r\n    autoOptions.addOption(\"Three Piece Left\", threePieceAutoLeft());\r\n    autoOptions.addOption(\"Two Piece Left\", twoPieceAutoLeft());\r\n    autoOptions.addOption(\"Two Piece Left + Charge\", twoPieceAutoChargeLeft());\r\n    autoOptions.addOption(\"Two Piece Right\", twoPieceAutoRight());\r\n    autoOptions.addOption(\"Two Piece Right + Charge\", twoPieceAutoChargeRight());\r\n\r\n    submit();\r\n  }\r\n\r\n  public CommandBase getAutoCommand() {\r\n    // var cmd = autoOptions.getSelected();\r\n    // if (cmd == null) {\r\n    //   cmd = Commands.none();\r\n    // }\r\n    return Commands.none();\r\n  }\r\n\r\n  public void submit() {\r\n    SmartDashboard.putData(\"Auto Options\", autoOptions);\r\n  }\r\n\r\n  public SequentialCommandGroup twoPieceAutoLeft() {\r\n    return new SequentialCommandGroup(\r\n        // new PathToPose(drive, () -> FieldUtil.getTransformPoseStation(FieldUtil.Station1)),\r\n        //  new WaitCommand(1),\r\n        new MecanumPathFollower(\r\n            drive, \"FirstPickUpLeftSide\", Constants.MediumAutoConstraints, true),\r\n        new WaitCommand(1),\r\n        new MecanumPathFollower(\r\n            drive, \"FirstDropOffLeftSide\", Constants.MediumAutoConstraints, false));\r\n  }\r\n\r\n  public SequentialCommandGroup twoPieceAutoChargeLeft() {\r\n    return new SequentialCommandGroup(\r\n        twoPieceAutoLeft(),\r\n        new WaitCommand(1),\r\n        new MecanumPathFollower(\r\n            drive, \"2pieceChargingLeft\", Constants.MediumAutoConstraints, false));\r\n  }\r\n\r\n  public SequentialCommandGroup threePieceAutoLeft() {\r\n    return new SequentialCommandGroup(\r\n        twoPieceAutoLeft(),\r\n        new MecanumPathFollower(\r\n            drive, \"SecondPickUpLeftSide\", Constants.MediumAutoConstraints, false),\r\n        new WaitCommand(1),\r\n        new MecanumPathFollower(\r\n            drive, \"SecondDropOffLeftSide\", Constants.MediumAutoConstraints, false));\r\n  }\r\n\r\n  public SequentialCommandGroup twoPieceAutoRight() {\r\n    return new SequentialCommandGroup(\r\n        new PathToPose(drive, () -> FieldUtil.getTransformPoseStation(FieldUtil.Station9)),\r\n        new WaitCommand(1),\r\n        new MecanumPathFollower(\r\n            drive, \"FirstPickUpRightSide\", Constants.MediumAutoConstraints, true),\r\n        new WaitCommand(1),\r\n        new MecanumPathFollower(\r\n            drive, \"FirstDropOffRightSide\", Constants.MediumAutoConstraints, false));\r\n  }\r\n\r\n  public SequentialCommandGroup twoPieceAutoChargeRight() {\r\n    return new SequentialCommandGroup(\r\n        twoPieceAutoRight(),\r\n        new WaitCommand(1),\r\n        new MecanumPathFollower(\r\n            drive, \"2pieceChargingRight\", Constants.MediumAutoConstraints, false));\r\n  }\r\n\r\n  public SequentialCommandGroup place() {\r\n    return new SequentialCommandGroup(\r\n        new InstantCommand(\r\n            () -> {\r\n              pivot.setGoal(Units.degreesToRadians(Constants.L3ANGLE));\r\n              pivot.enable();\r\n            },\r\n            pivot),\r\n        new WaitCommand(3),\r\n        new StartEndCommand(arm::retract, arm::stop, arm).withTimeout(3),\r\n        new StartEndCommand(manipulator::release, manipulator::expel, manipulator).withTimeout(0.1));\r\n  }\r\n\r\n  public SequentialCommandGroup placeAndBalance() {\r\n    return new SequentialCommandGroup(\r\n        //    place(),\r\n        //  new Rotate180Command(drive),\r\n        new ForwardCommand(drive, Units.feetToMeters(2)), new AutoLevelingCommand(drive));\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/frc/robot/AutoOptions.java b/src/main/java/frc/robot/AutoOptions.java
--- a/src/main/java/frc/robot/AutoOptions.java	
+++ b/src/main/java/frc/robot/AutoOptions.java	
@@ -154,8 +154,7 @@
             },
             pivot),
         new WaitCommand(3),
-        new StartEndCommand(arm::retract, arm::stop, arm).withTimeout(3),
-        new StartEndCommand(manipulator::release, manipulator::expel, manipulator).withTimeout(0.1));
+        new StartEndCommand(arm::retract, arm::stop, arm).withTimeout(3));
   }
 
   public SequentialCommandGroup placeAndBalance() {
