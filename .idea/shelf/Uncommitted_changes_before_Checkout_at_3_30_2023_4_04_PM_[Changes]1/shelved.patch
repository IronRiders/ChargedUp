Index: src/main/java/frc/robot/RobotContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package frc.robot;\r\n\r\nimport frc.robot.subsystems.ManipulatorSubsystem;\r\nimport edu.wpi.first.math.MathUtil;\r\nimport edu.wpi.first.math.util.Units;\r\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\r\nimport edu.wpi.first.wpilibj2.command.Command;\r\nimport edu.wpi.first.wpilibj2.command.Commands;\r\nimport edu.wpi.first.wpilibj2.command.InstantCommand;\r\nimport edu.wpi.first.wpilibj2.command.RunCommand;\r\nimport edu.wpi.first.wpilibj2.command.StartEndCommand;\r\nimport edu.wpi.first.wpilibj2.command.button.CommandJoystick;\r\nimport edu.wpi.first.wpilibj2.command.button.CommandXboxController;\r\nimport frc.robot.commands.AutoLevelingCommand;\r\nimport frc.robot.commands.GrabManipulatorCommand;\r\nimport frc.robot.commands.ExpelManipulatorCommand;\r\nimport frc.robot.commands.PreLevelingCommand;\r\nimport frc.robot.subsystems.*;\r\n\r\npublic class RobotContainer {\r\n\r\n  public final ManipulatorSubsystem manipulator = new ManipulatorSubsystem();\r\n  public final DriveSubsystem drive = new DriveSubsystem();\r\n  private final Vision vision = new Vision();\r\n  public final PivotSubsystem pivot = new PivotSubsystem();\r\n  public final ArmSubsystem arm = new ArmSubsystem();\r\n  public final LightsSubsystem lights = new LightsSubsystem();\r\n  private final CommandJoystick controller = new CommandJoystick(0);\r\n  private final CommandXboxController xboxController = new CommandXboxController(1);\r\n  private final AutoOptions autoOptions = new AutoOptions(drive, pivot, arm, manipulator);\r\n  private GrabObject grabRequest = GrabObject.CONE;\r\n\r\n  public RobotContainer() {\r\n    configureBindings();\r\n    // lights.setColorGrabObject(grabRequest);\r\n  }\r\n\r\n  private void configureBindings() {\r\n    drive.setDefaultCommand(\r\n        new RunCommand(\r\n            () ->\r\n                drive.setChassisSpeeds(\r\n                    scaledDeadBand(xboxController.getLeftX(), 1),\r\n                    scaledDeadBand(xboxController.getLeftY(), 1),\r\n                    -scaledDeadBand(xboxController.getRightX(), 1),\r\n                    false),\r\n            drive));\r\n\r\n    // Game Piece Tracking\r\n    // controller\r\n    //     .button(34)\r\n    //     .whileTrue(\r\n    //         new PathToPose(\r\n    //             drive, () -> vision.fieldElementTracking(drive.getPose2d(),\r\n    // vision.camera).get()));\r\n\r\n    // On The Fly Pathing to Every Station\r\n    // controller\r\n    //     .button(100)\r\n    //     .onTrue(new PathToPose(drive, () ->\r\n    // FieldUtil.getTransformPoseStation(FieldUtil.Station1)));\r\n    // controller\r\n    //     .button(101)\r\n    //     .onTrue(new PathToPose(drive, () ->\r\n    // FieldUtil.getTransformPoseStation(FieldUtil.Station2)));\r\n    // controller\r\n    //     .button(102)\r\n    //     .onTrue(new PathToPose(drive, () ->\r\n    // FieldUtil.getTransformPoseStation(FieldUtil.Station3)));\r\n    // controller\r\n    //     .button(103)\r\n    //     .onTrue(new PathToPose(drive, () ->\r\n    // FieldUtil.getTransformPoseStation(FieldUtil.Station4)));\r\n    // controller\r\n    //     .button(104)\r\n    //     .onTrue(new PathToPose(drive, () ->\r\n    // FieldUtil.getTransformPoseStation(FieldUtil.Station5)));\r\n    // controller\r\n    //     .button(105)\r\n    //     .onTrue(new PathToPose(drive, () ->\r\n    // FieldUtil.getTransformPoseStation(FieldUtil.Station6)));\r\n    // controller\r\n    //     .onTrue(new PathToPose(drive, () ->\r\n    // FieldUtil.getTransformPoseStation(FieldUtil.Station7)));\r\n    // controller\r\n    //     .button(107)\r\n    //     .onTrue(new PathToPose(drive, () ->\r\n    // FieldUtil.getTransformPoseStation(FieldUtil.Station8)));\r\n    // controller\r\n    //     .button(108)\r\n    //     .onTrue(new PathToPose(drive, () ->\r\n    // FieldUtil.getTransformPoseStation(FieldUtil.Station9)));\r\n    controller\r\n        .button(7)\r\n        .onTrue(\r\n            new InstantCommand(\r\n                () -> {\r\n                  if (grabRequest == GrabObject.CONE) {\r\n                    // Switch to Cube\r\n                    grabRequest = GrabObject.BOX;\r\n                  } else {\r\n                    // Switch to Cone\r\n                    grabRequest = GrabObject.CONE;\r\n                  }\r\n                  LightsSubsystem.setColorGrabObject(grabRequest);\r\n                },\r\n                lights));\r\n\r\n    controller.button(1).whileTrue(new GrabManipulatorCommand(manipulator, GrabObject.BOX));\r\n    controller.button(2).whileTrue(new ExpelManipulatorCommand(manipulator));\r\n\r\n    controller\r\n        .button(9)\r\n        .onTrue(\r\n            Commands.runOnce(\r\n                () -> {\r\n                  pivot.setGoal(Units.degreesToRadians(Constants.L2ANGLE));\r\n                  pivot.enable();\r\n                },\r\n                pivot));\r\n\r\n    controller\r\n        .button(10)\r\n        .onTrue(\r\n            Commands.runOnce(\r\n                () -> {\r\n                  pivot.setGoal(Units.degreesToRadians(Constants.L3ANGLE));\r\n                  pivot.enable();\r\n                },\r\n                pivot));\r\n\r\n    controller\r\n        .button(8)\r\n        .onTrue(\r\n            Commands.runOnce(\r\n                () -> {\r\n                  pivot.setGoal(Constants.ARM_OFF_SET_RADS);\r\n                  pivot.enable();\r\n                },\r\n                pivot));\r\n    controller\r\n        .button(11)\r\n        .onTrue(\r\n            Commands.runOnce(\r\n                () -> {\r\n                  pivot.setGoal(Units.degreesToRadians(Constants.LGROUND));\r\n                  pivot.enable();\r\n                },\r\n                pivot));\r\n    // human substation pickup\r\n    controller\r\n        .button(12)\r\n        .onTrue(\r\n            Commands.runOnce(\r\n                () -> {\r\n                  pivot.setGoal(Units.degreesToRadians(Constants.LHUMAN));\r\n                  pivot.enable();\r\n                },\r\n                pivot));\r\n\r\n    controller.button(5).whileTrue(new StartEndCommand(arm::extend, arm::stop, arm));\r\n    controller.button(3).whileTrue(new StartEndCommand(arm::retract, arm::stop, arm));\r\n\r\n    xboxController.button(2).whileTrue(new PreLevelingCommand(drive));\r\n    xboxController.button(1).whileTrue(new AutoLevelingCommand(drive));\r\n    // Set up shuffleboard\r\n    xboxController.button(3).onTrue(Commands.runOnce(() -> drive.pigeon.reset(), drive));\r\n  }\r\n\r\n  public Command getAutonomousCommand() {\r\n    return autoOptions.placeAndBalance();\r\n    // return Commands.runOnce(() -> {}, drive);\r\n  }\r\n\r\n  public void traj() {\r\n    SmartDashboard.putData(\"field\", drive.field);\r\n  }\r\n\r\n  private double scaledDeadBand(double value, double exp) {\r\n    double value1 = MathUtil.applyDeadband(value, Constants.DEADBAND);\r\n    double test = Math.signum(value1) * Math.pow(Math.abs(value1), exp);\r\n    return test;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/frc/robot/RobotContainer.java b/src/main/java/frc/robot/RobotContainer.java
--- a/src/main/java/frc/robot/RobotContainer.java	
+++ b/src/main/java/frc/robot/RobotContainer.java	
@@ -107,7 +107,7 @@
                 lights));
 
     controller.button(1).whileTrue(new GrabManipulatorCommand(manipulator, GrabObject.BOX));
-    controller.button(2).whileTrue(new ExpelManipulatorCommand(manipulator));
+    controller.button(2).whileTrue(new ExpelManipulatorCommand(manipulator, GrabObject.BOX));
 
     controller
         .button(9)
